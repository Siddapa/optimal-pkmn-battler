//! Code generated by `tools/generate` - manual edits will be overwritten.

const gen{{{ gen }}} = @import("../../gen{{{ gen }}}/data.zig");
{{{ import }}}
const std = @import("std");

const assert = std.debug.assert;{{{ percent }}}
const Type = gen{{{ gen }}}.Type;

/// Representation of a Generation {{{ roman }}} Pokémon move.
pub const Move = enum({{{ Move.type }}}) {
    None,
    {{{ Move.values }}},

    {{{ Move.Data }}}

    const DATA = [_]Data{
        {{{ Move.data }}},
    };
{{{ Move.Effect }}}
    const Target = enum({{{ Move.targetType }}}) {
        // none
        All,
        AllySide,
        Field,
        Self,
        // resolve
        AllOthers,
        Depends,
        Other,
        Any,
        Allies,
        Ally,
        AllyOrSelf,
        Foe,
        // resolve + run
        Foes,
        FoeSide,
        RandomFoe,
    };

    const PP = [_]u8{
        {{{ Move.ppData }}},
    };

    comptime {
        assert(@sizeOf(Move) == {{{ Move.size }}});
        assert(@sizeOf(@TypeOf(DATA)) == {{{ Move.dataSize }}});
    }

    /// The number of Pokémon moves in this generation.
    pub const size = {{{ Move.num }}};

    /// Pokémon moves that can be called by Metronome in this generation.
    pub const METRONOME = {{{ Move.metronome }}}

    /// Returns the `Data` corresponding to the move.
    pub fn get(id: Move) Data {
        {{{ Move.assert }}}
        return DATA[@intFromEnum(id) - 1];
    }

    /// Returns the base PP of the move.
    pub fn pp(id: Move) u8 {
        assert(id != .None);
        return PP[@intFromEnum(id) - 1];
    }
};
