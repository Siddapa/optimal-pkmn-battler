//! Code generated by `tools/generate` - manual edits will be overwritten.

const data = @import("../../gen{{{ gen }}}/data.zig");
const std = @import("std");

const assert = std.debug.assert;
const Type = data.Type;

/// Representation of a held item in Generation {{{ roman }}} Pok√©mon.
pub const Item = enum({{{ Item.type }}}) {
    None,
    {{{ Item.values }}}

    comptime {
        assert(@sizeOf(Item) == {{{ Item.size }}});
    }

    /// The number of held items in this generation.
    pub const size = {{{ Item.num }}};

    /// Returns a `Type` boosted by this item or `null` if the item is not a type-boosting item.
    pub fn boost(item: Item) ?Type {
        assert(item != .None);
        if (item == .PolkadotBow) return .Normal;
        return if (@intFromEnum(item) <= {{{ Item.boosts }}}) @enumFromInt(@intFromEnum(item) - 1) else null;
    }

    /// Whether or not this item is Mail.
    pub fn isMail(item: Item) bool {
        assert(item != .None);
        return @intFromEnum(item) > {{{ Item.present }}} and @intFromEnum(item) <= {{{ Item.mail }}};
    }
};
